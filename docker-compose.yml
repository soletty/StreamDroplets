version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: stream-droplets-db
    environment:
      POSTGRES_DB: ${DB_NAME:-stream_droplets}
      POSTGRES_USER: ${DB_USER:-stream}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-stream} -d ${DB_NAME:-stream_droplets}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - stream-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: stream-droplets:latest
    container_name: stream-droplets-app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database connection (using service name as host)
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-stream_droplets}
      DB_USER: ${DB_USER:-stream}
      DB_PASSWORD: ${DB_PASSWORD:-changeme}
      
      # API Configuration
      API_PORT: ${API_PORT:-3000}
      API_HOST: 0.0.0.0
      
      # Droplet Configuration
      DROPLET_USD_RATIO: ${DROPLET_USD_RATIO:-1.0}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_PRETTY: ${LOG_PRETTY:-false}
      
      # Node environment
      NODE_ENV: production
    env_file:
      - .env
    ports:
      - "${API_PORT:-3000}:3000"
    volumes:
      - ./logs:/app/logs
      - ./src/db/migrations:/app/src/db/migrations:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: "no"
    networks:
      - stream-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  stream-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local